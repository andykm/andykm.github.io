import requests
import pandas as pd
import shodan  # Import Shodan library
import time  # to avoid flooding requests
from datetime import datetime  # Import datetime module for current date
#import matplotlib.pyplot as plt  # comment for streamlit/uncomment for jupyter
#from tabulate import tabulate  # comment for streamlit/uncomment for jupyter
import streamlit as st  # comment for jupyter/uncomment for streamlit
import altair as alt   # comment for jupyter/uncomment for streamlit

# Uncomment the following imports for Streamlit usage
# import streamlit as st  # Import Streamlit library

# Shodan API Key
SHODAN_API_KEY = ''  # Replace with your Shodan API Key
shodan_api = shodan.Shodan(SHODAN_API_KEY)


def fetch_cve_brief_details(cve_id):
    url = f"https://cve.circl.lu/api/cve/{cve_id}"
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        summary = data.get("summary", "No description available")
        cvss_score = data.get("cvss", "N/A")

        try:
            cvss_score = float(cvss_score)
            cvss_score = f"{cvss_score:.1f}"
        except (ValueError, TypeError):
            cvss_score = "N/A"

        severity = "No Score"
        if cvss_score != "N/A":
            cvss_score_float = float(cvss_score)
            if cvss_score_float >= 9.0:
                severity = "Critical"
            elif cvss_score_float >= 7.0:
                severity = "High"
            elif cvss_score_float >= 4.0:
                severity = "Medium"
            else:
                severity = "Low"

        return {
            "CVE ID": cve_id,
            "CVE Summary": summary,
            "CVSS Base Score": cvss_score,
            "Severity": severity,
        }
    else:
        print(f"Failed to fetch data for {cve_id}: {response.status_code}")
        return None


def get_cves_from_shodan(ip_address):
    try:
        result = shodan_api.host(ip_address)
        return result.get("vulns", [])
    except shodan.exception.APIError as e:
        print(f"Error: {e}")
        return []

# uncomment section for jupyter/comment section for streamlit


#def display_vulnerabilities_jupyter(ip_address, cve_details_list, current_date):
    # Convert to pandas DataFrame
    #df = pd.DataFrame(cve_details_list)

    # Adjust pandas display options for complete output
    #pd.set_option('display.max_columns', None)  # Show all columns
    #pd.set_option('display.max_rows', None)  # Optional: Show all rows
    #pd.set_option('display.width', 1000)  # Expand the display width
    #pd.set_option('display.max_colwidth', None)  # Do not truncate column content

    # Sort by severity
    #severity_order = ["Critical", "High", "Medium", "Low", "No Score"]
    #df["Severity"] = pd.Categorical(df["Severity"], categories=severity_order, ordered=True)
    #df = df.sort_values(by=["Severity", "CVSS Base Score"], ascending=[True, False])

    # Summary table
    #summary = df["Severity"].value_counts().reset_index()
    #summary.columns = ["Severity", "Count"]
    #summary["Severity"] = pd.Categorical(summary["Severity"], categories=severity_order, ordered=True)
    #summary = summary.sort_values(by="Severity")

    # Display heading
    #print(f"Summary for IP {ip_address} on {current_date}:\n")

    # Display summary table using tabulate
    #print("Vulnerability Summary:")
    #print(tabulate(summary, headers="keys", tablefmt="grid", stralign="left"))
    #print("\n")

    # Display bar chart
    #plt.figure(figsize=(8, 5))
    #plt.bar(summary["Severity"], summary["Count"], color="skyblue")
    #plt.xlabel("Severity")
    #plt.ylabel("Count")
    #plt.title(f"Vulnerabilities Severity Summary for IP {ip_address}")
    #plt.show()

    # Display detailed vulnerabilities
    #print(f"\nList of vulnerabilities for IP {ip_address} on {current_date}:\n")
    #print(tabulate(df, headers="keys", tablefmt="grid", stralign="left"))

#ip_address = input("Enter IP Address: ")

#if ip_address:
    #current_date = datetime.now().strftime("%Y-%m-%d")
    #cve_ids = get_cves_from_shodan(ip_address)

    #if cve_ids:
        #cve_details_list = []

        #for cve_id in cve_ids:
            #cve_data = fetch_cve_brief_details(cve_id)
            #if cve_data:
                #cve_details_list.append(cve_data)
            #time.sleep(1)  # Avoid flooding the API

        #display_vulnerabilities_jupyter(ip_address, cve_details_list, current_date)

    #else:
        #print(f"No vulnerabilities found for IP {ip_address} on {current_date}.")


# Uncomment section for Streamlit/comment section for jupyter

st.title("Vulnerability Scanner using Shodan")
st.write("Enter IP Address (For multiple use comma-seperated e.g 192.168.1.0,192.168.0.2):")

ip_addresses_input = st.text_input("IP Addresses", "")

if ip_addresses_input:
    # Split and clean the input into a list of IPs
    ip_addresses = [ip.strip() for ip in ip_addresses_input.split(',') if ip.strip()]
    current_date = datetime.now().strftime("%Y-%m-%d")

    for ip_address in ip_addresses:
        st.write(f"## Scanning IP Address: {ip_address}")

        cve_ids = get_cves_from_shodan(ip_address)

        if cve_ids:
            cve_details_list = []

            for cve_id in cve_ids:
                cve_data = fetch_cve_brief_details(cve_id)
                if cve_data:
                    cve_details_list.append(cve_data)
                time.sleep(1)  # Avoid flooding the API

            df = pd.DataFrame(cve_details_list)
            severity_order = ["Critical", "High", "Medium", "Low", "No Score"]
            df["Severity"] = pd.Categorical(df["Severity"], categories=severity_order, ordered=True)
            df = df.sort_values(by=["Severity", "CVSS Base Score"], ascending=[True, False])

            summary = df["Severity"].value_counts().reset_index()
            summary.columns = ["Severity", "Count"]
            summary["Severity"] = pd.Categorical(summary["Severity"], categories=severity_order, ordered=True)
            summary = summary.sort_values(by="Severity")

            st.write(f"### Summary for IP {ip_address} on {current_date}")
            col1, col2 = st.columns(2)
            with col1:
                st.table(summary)
            with col2:
                bar_chart = alt.Chart(summary).mark_bar().encode(
                    x='Severity',
                    y='Count',
                    color='Severity',
                    tooltip=['Severity', 'Count']
                ).properties(width=400, height=300)
                st.altair_chart(bar_chart, use_container_width=True)
            st.write(f"### List of vulnerabilities for IP {ip_address} on {current_date}:")
            st.table(df)
        else:
            st.write(f"No vulnerabilities found for IP {ip_address} on {current_date}.")